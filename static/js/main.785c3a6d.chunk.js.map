{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","quotes","quote","author","currentQuote","currentAuthor","handleClick","bind","random","Math","floor","this","length","setTimeout","setState","className","React","Component","QuoteBox","id","src","alt","onClick","href","title","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAGqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,CACN,CACEC,MACE,uEACFC,OAAQ,gBAEV,CACED,MAAO,kCACPC,OAAQ,aAEV,CACED,MACE,qFACFC,OAAQ,uBAEV,CACED,MACE,oEACFC,OAAQ,cAEV,CACED,MACE,4FACFC,OAAQ,mBAEV,CACED,MACE,qEACFC,OAAQ,kBAEV,CACED,MAAO,qDACPC,OAAQ,kBAEV,CACED,MACE,iGACFC,OAAQ,iBAEV,CACED,MACE,2EACFC,OAAQ,oBAEV,CACED,MACE,4EACFC,OAAQ,eAEV,CACED,MAAO,sCACPC,OAAQ,aAEV,CACED,MACE,yEACFC,OAAQ,cAEV,CACED,MACE,iHACFC,OAAQ,mBAEV,CACED,MACE,mGACFC,OAAQ,mBAEV,CACED,MAAO,iDACPC,OAAQ,mBAEV,CACED,MACE,8HACFC,OAAQ,mBAEV,CACED,MACE,qFACFC,OAAQ,cAEV,CACED,MACE,oFACFC,OAAQ,YAEV,CACED,MACE,qFACFC,OAAQ,gBAEV,CACED,MAAO,eACPC,OAAQ,iBAEV,CACED,MACE,4EACFC,OAAQ,iBAGZC,aAAc,uCACdC,cAAe,aAEjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBA5GF,E,0DA8GJ,IAAD,OACRC,EAASC,KAAKC,MAAMD,KAAKD,SAAWG,KAAKX,MAAMC,OAAOW,QAC1DC,YAAW,WACT,EAAKC,SAAS,CACZV,aAAc,EAAKJ,MAAMC,OAAOO,GAAQN,MACxCG,cAAe,EAAKL,MAAMC,OAAOO,GAAQL,WAE1C,O,+BAIH,OACE,yBAAKY,UAAU,aACb,0CAEA,kBAAC,EAAD,W,GA9HyBC,IAAMC,YAoIjCC,E,uKAEF,OACE,yBAAKC,GAAG,aACN,yBAAKJ,UAAU,SACb,yBACEK,IAAI,wDACJC,IAAI,cAEN,uBAAGF,GAAG,QAAN,IAAeR,KAAKX,MAAMI,aAA1B,KACA,uBAAGe,GAAG,UAAN,KAAkBR,KAAKX,MAAMK,gBAE/B,yBAAKU,UAAU,WACb,4BAAQI,GAAG,YAAYG,QAASX,KAAKL,aAArC,UAGA,gCACE,uBACEa,GAAG,cACHI,KACE,6CACAZ,KAAKX,MAAMI,aACX,IACAO,KAAKX,MAAMK,cAEbmB,MAAM,8BACNC,OAAO,SACPC,IAAI,uBAVN,gB,GAjBW5B,GC3HH6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.785c3a6d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [\n        {\n          quote:\n            \"If you don't like the road you're walking, start paving another one.\",\n          author: \"Dolly Parton\"\n        },\n        {\n          quote: \"Life is a series of baby steps.\",\n          author: \"Hoda Kotb\"\n        },\n        {\n          quote:\n            \"Every man takes the limits of his own field of vision for the limits of the world.\",\n          author: \"Arthur Schopenhauer\"\n        },\n        {\n          quote:\n            \"Believe those who are seeking the truth; doubt those who find it.\",\n          author: \"Andre Gide\"\n        },\n        {\n          quote:\n            \"If I had six hours to chop down a tree, I’d spend the first four sharpening the axe.\",\n          author: \"Abraham Lincoln\"\n        },\n        {\n          quote:\n            \"Millions saw the apple fall, but Newton was the one who asked why.\",\n          author: \"Bernard Baruch\"\n        },\n        {\n          quote: \"The man on top of the mountain did not fall there.\",\n          author: \"Vince Lombardi\"\n        },\n        {\n          quote:\n            \"Happiness does not depend on what you have or who you are. It solely relies on what you think.\",\n          author: \"Dale Carnegie\"\n        },\n        {\n          quote:\n            \"You don’t drown by falling in the water; you drown by staying there\",\n          author: \"Edwin Louis Cole\"\n        },\n        {\n          quote:\n            \"To live is the rarest thing in the world. Most people exist, that is all.\",\n          author: \"Oscar Wilde\"\n        },\n        {\n          quote: \"Would you like you, If you met you?\",\n          author: \"Anonymous\"\n        },\n        {\n          quote:\n            \"Science is a way of thinking much more than it is a body of knowledge.\",\n          author: \"Carl Sagan\"\n        },\n        {\n          quote:\n            \"In questions of science, the authority of a thousand is not worth the humble reasoning of a single individual.\",\n          author: \"Galileo Galilei\"\n        },\n        {\n          quote:\n            \"I learned very early the difference between knowing the name of something and knowing something.\",\n          author: \"Richard Feynman\"\n        },\n        {\n          quote: \"Life would be tragic if it weren’t funny.\",\n          author: \"Stephen Hawking\"\n        },\n        {\n          quote:\n            \"The feeling of awed wonder that science can give us is one of the highest experiences of which the human psyche is capable.\",\n          author: \"Richard Dawkins\"\n        },\n        {\n          quote:\n            \"If you wish to make an apple pie from scratch, you must first invent the universe.\",\n          author: \"Carl Sagan\"\n        },\n        {\n          quote:\n            \"He is richest who is content with the least, for content is the wealth of nature.\",\n          author: \"Socrates\"\n        },\n        {\n          quote:\n            \"People who think they know everything are a great annoyance to those of us who do.\",\n          author: \"Isaac Asimov\"\n        },\n        {\n          quote: \"Don't Panic.\",\n          author: \"Douglas Adams\"\n        },\n        {\n          quote:\n            \"Self-education is, I firmly believe, the only kind of education there is.\",\n          author: \"Isaac Asimov\"\n        }\n      ],\n      currentQuote: \"You have to be odd to be number one.\",\n      currentAuthor: \"Dr. Seuss\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    let random = Math.floor(Math.random() * this.state.quotes.length);\n    setTimeout(() => {\n      this.setState({\n        currentQuote: this.state.quotes[random].quote,\n        currentAuthor: this.state.quotes[random].author\n      });\n    }, 400);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Quotes ! !</h1>\n\n        <QuoteBox />\n      </div>\n    );\n  }\n}\n\nclass QuoteBox extends App {\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <div className=\"quote\">\n          <img\n            src=\"https://img.icons8.com/clouds/100/000000/light-on.png\"\n            alt=\"cloud-top\"\n          />\n          <p id=\"text\">\"{this.state.currentQuote}\"</p>\n          <p id=\"author\">- {this.state.currentAuthor}</p>\n        </div>\n        <div className=\"buttons\">\n          <button id=\"new-quote\" onClick={this.handleClick}>\n            Change\n          </button>\n          <button>\n            <a\n              id=\"tweet-quote\"\n              href={\n                \"https://www.twitter.com/intent/tweet?text=\" +\n                this.state.currentQuote +\n                \"-\" +\n                this.state.currentAuthor\n              }\n              title=\"Share this quote on Twitter\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Tweet\n            </a>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}